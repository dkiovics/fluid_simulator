#version 460 compatibility

layout(local_size_x = 64, local_size_y = 1, local_size_z = 1) in;

uniform int seed;

struct ResultSSBOData {
	float signedPerturbation[4];
	float paramPositiveOffset[4];
	float paramNegativeOffset[4];
};

layout(std430, binding = 0) restrict readonly buffer parameterSSBO {
	vec4 parameters[];
};

layout(std430, binding = 1) restrict readonly buffer perturbationSSBO {
	vec4 perturbations[];
};

layout(std430, binding = 2) restrict writeonly buffer resultSSBO {
	ResultSSBOData result[];
};

uvec4 pcg4d(uvec4 v) {
	v = v * 1664525u + 1013904223u;
	v.x += v.y*v.w; v.y += v.z*v.x; v.z += v.x*v.y; v.w += v.y*v.z;
	v ^= v >> 16u;
	v.x += v.y*v.w; v.y += v.z*v.x; v.z += v.x*v.y; v.w += v.y*v.z;
	return v;
}



void main() {
	unsigned int index = gl_LocalInvocationID.x + gl_WorkGroupSize.x * gl_WorkGroupID.x;
	if (index >= parameters.length()) {
		return;
	}

	vec4 parameter = parameters[index];
	vec4 perturbation = perturbations[index];
	ResultSSBOData resultData;
	uvec4 perturbationSign = pcg4d(uvec4(seed * index, 2 * seed * index, 3 * seed * index, 4 * seed * index));

	for (int i = 0; i < 4; i++) {
		resultData.signedPerturbation[i] = perturbation[i] * (perturbationSign[i] % 2 == 0 ? 1.0 : -1.0);
		resultData.paramPositiveOffset[i] = parameter[i] + resultData.signedPerturbation[i];
		resultData.paramNegativeOffset[i] = parameter[i] - resultData.signedPerturbation[i];
	}

	result[index] = resultData;
}